pipeline {  
    agent any  
 
    parameters {
        string(name: 'JSON_FILE_PATH', defaultValue: 'Variables.json', description: 'Path to the JSON parameter file')
    }

    stages {  
        stage('Read Parameters from File') {  
            steps {  
                script {
                    def jsonFilePath = params.JSON_FILE_PATH
                    def jsonContent = readFile(jsonFilePath)
                    def jsonParams = new groovy.json.JsonSlurper().parseText(jsonContent)
 
                    // Access parameters from the JSON object
                    def gitUrl = jsonParams.GIT_URL
                    def azureStorageAccount = jsonParams.AZURE_STORAGE_ACCOUNT
                    def azureStorageKey = jsonParams.AZURE_STORAGE_KEY
                    def azureFileShare = jsonParams.AZURE_FILE_SHARE
                    def azureFileDirectory = jsonParams.AZURE_FILE_DIRECTORY
                    def sourcePath = jsonParams.SOURCE_PATH

                    // Proceed with the pipeline using the parameters
                }
            }  
        }  
 
        // Add your other stages here
       stage('Clone Git Repository') {
            steps {
                git branch: "${params.GIT_BRANCH}", url: "${params.GIT_URL}"
            }
        }
      stage('Upload to Azure File Share') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${params.AZURE_STORAGE_KEY}", usernameVariable: 'AZURE_STORAGE_KEY_USERNAME', passwordVariable: 'AZURE_STORAGE_KEY_PASSWORD')]) {
                    bat 'powershell.exe -Command "az storage file upload --account-name ${params.AZURE_STORAGE_ACCOUNT} --account-key %AZURE_STORAGE_KEY_PASSWORD% --share-name ${params.AZURE_FILE_SHARE} --source ${params.SOURCE_PATH} --path ${params.AZURE_FILE_DIRECTORY}"'
                }
            }
 }


    }  
}
